<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" InitialTargets="EnsureNuGetPackageBuildImportsUpdate" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\packages\Microsoft.Windows.CppWinRT.2.0.210329.4\build\native\Microsoft.Windows.CppWinRT.props" Condition="Exists('..\packages\Microsoft.Windows.CppWinRT.2.0.210329.4\build\native\Microsoft.Windows.CppWinRT.props')" />
  <PropertyGroup Label="Globals">
    <VCProjectVersion>15.0</VCProjectVersion>
    <ProjectGuid>{0f39c2eb-f8c6-473e-b26a-0714385798f5}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
    <RootNamespace>Notepad</RootNamespace>
    <BaseIntermediateOutputPath>obj\</BaseIntermediateOutputPath>
    <IntDir>$(BaseIntermediateOutputPath)$(Platform)\$(Configuration)\</IntDir>
    <OutDir>$(ProjectDir)bin\$(Platform)\$(Configuration)\</OutDir>
    <CppWinRTOptimized>true</CppWinRTOptimized>
    <CppWinRTRootNamespaceAutoMerge>true</CppWinRTRootNamespaceAutoMerge>
    <CppWinRTGenerateWindowsMetadata>true</CppWinRTGenerateWindowsMetadata>
    <MinimalCoreWin>true</MinimalCoreWin>
    <GeneratedFilesDir>$(BaseIntermediateOutputPath)Generated Files\</GeneratedFilesDir>
    <WindowsTargetPlatformVersion Condition=" '$(WindowsTargetPlatformVersion)' == '' ">10.0.19041.0</WindowsTargetPlatformVersion>
    <WindowsTargetPlatformMinVersion>10.0.17134.0</WindowsTargetPlatformMinVersion>
    <WindowsSDKDesktopARM64Support>true</WindowsSDKDesktopARM64Support>
    <AppContainerApplication>false</AppContainerApplication>
    <AppxPackage>false</AppxPackage>
    <ApplicationType>Windows Store</ApplicationType>
    <ApplicationTypeRevision>10.0</ApplicationTypeRevision>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|ARM">
      <Configuration>Debug</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM">
      <Configuration>Release</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Production|ARM">
      <Configuration>Production</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|ARM64">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM64">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Production|ARM64">
      <Configuration>Production</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Production|Win32">
      <Configuration>Production</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Production|x64">
      <Configuration>Production</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)'=='Production'">
    <ClCompile>
      <PreprocessorDefinitions>_PRODUCTION;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <PropertyGroup Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <PlatformToolset>v140</PlatformToolset>
    <PlatformToolset Condition="'$(VisualStudioVersion)' == '15.0'">v141</PlatformToolset>
    <PlatformToolset Condition="'$(VisualStudioVersion)' == '16.0'">v142</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='Debug'" Label="Configuration">
    <UseDebugLibraries>true</UseDebugLibraries>
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='Release' Or '$(Configuration)'=='Production'" Label="Configuration">
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <ItemDefinitionGroup>
    <ClCompile>
      <LanguageStandard>stdcpplatest</LanguageStandard>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PreprocessorDefinitions>_CONSOLE;WIN32_LEAN_AND_MEAN;WINRT_LEAN_AND_MEAN;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <WarningLevel>Level4</WarningLevel>
      <AdditionalOptions>%(AdditionalOptions) /permissive- /bigobj /FS</AdditionalOptions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)'=='Debug'">
    <ClCompile>
      <Optimization>Disabled</Optimization>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <GenerateWindowsMetadata>false</GenerateWindowsMetadata>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Platform)'=='Win32'">
    <ClCompile>
      <PreprocessorDefinitions>WIN32;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)'=='Release' Or '$(Configuration)'=='Production'">
    <ClCompile>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <GenerateWindowsMetadata>false</GenerateWindowsMetadata>
    </Link>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClCompile Include="main.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="AssemblyInfo.rc" />
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
    <None Include="packages.targets" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
    <Import Project="packages.targets" Condition="Exists('packages.targets')" />
    <Import Project="..\packages\Microsoft.Windows.CppWinRT.2.0.210329.4\build\native\Microsoft.Windows.CppWinRT.targets" Condition="Exists('..\packages\Microsoft.Windows.CppWinRT.2.0.210329.4\build\native\Microsoft.Windows.CppWinRT.targets')" />
  </ImportGroup>
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\packages\Microsoft.Windows.CppWinRT.2.0.210329.4\build\native\Microsoft.Windows.CppWinRT.props')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Microsoft.Windows.CppWinRT.2.0.210329.4\build\native\Microsoft.Windows.CppWinRT.props'))" />
    <Error Condition="!Exists('..\packages\Microsoft.Windows.CppWinRT.2.0.210329.4\build\native\Microsoft.Windows.CppWinRT.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Microsoft.Windows.CppWinRT.2.0.210329.4\build\native\Microsoft.Windows.CppWinRT.targets'))" />
  </Target>

  <UsingTask TaskName="GenerateApplicationUserModeId" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <ManifestPath ParameterType="System.String" Required="true" />
      <ApplicationUserModeId ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Reference Include="System.Xml" />
      <Reference Include="System.Runtime.InteropServices" />
      <Reference Include="Microsoft.Build.Framework" />
      <Code Type="Class" Language="cs">
        <![CDATA[
          using System;
          using System.Xml;
          using System.Text;
          using System.Runtime.InteropServices;
          using Microsoft.Build.Framework;
          using Microsoft.Build.Utilities;

          public class GenerateApplicationUserModeId : Task
          {
              [Required]
              public string ManifestPath { get; set; }

              [Output]
              public string ApplicationUserModeId { get; set; }

              public override bool Execute()
              {
                  var manifest = new XmlDocument();
                  manifest.Load(ManifestPath);

                  var packageName = manifest["Package"]["Identity"].GetAttribute("Name");
                  var publisher = manifest["Package"]["Identity"].GetAttribute("Publisher");
                  var packageId = new PACKAGE_ID
                  {
                      name = packageName,
                      publisher = publisher
                  };

                  uint packageFamilyNameLength = 0;
                  if (PackageFamilyNameFromId(packageId, ref packageFamilyNameLength, null) != 122)
                  {
                      throw new Exception("Failed to retrieve Package Family Name length");
                  }

                  var packageFamilyNameBuilder = new StringBuilder((int)packageFamilyNameLength);
                  if (PackageFamilyNameFromId(packageId, ref packageFamilyNameLength, packageFamilyNameBuilder) != 0)
                  {
                      throw new Exception("Failed to retrieve Package Family Name");
                  }

                  string packageFamilyName = packageFamilyNameBuilder.ToString();
                  string applicationUserModelId = null;
                  foreach (XmlElement application in manifest["Package"]["Applications"].ChildNodes)
                  {
                      if (application.Name != "Application" || application.GetAttribute("EntryPoint") != "Notepads.App") continue;

                      var appId = application.GetAttribute("Id");
                      uint applicationUserModelIdLength = 0;
                      if (FormatApplicationUserModelId(packageFamilyName, appId, ref applicationUserModelIdLength, null) != 122)
                      {
                          throw new Exception("Failed to retrieve Application User Mode Id length");
                      }

                      var applicationUserModelIdBuilder = new StringBuilder((int)applicationUserModelIdLength);
                      if (FormatApplicationUserModelId(packageFamilyName, appId, ref applicationUserModelIdLength, applicationUserModelIdBuilder) != 0)
                      {
                          throw new Exception("Failed to retrieve Application User Mode Id");
                      }

                      applicationUserModelId = applicationUserModelIdBuilder.ToString();
                      break;
                  }

                  if (!string.IsNullOrEmpty(applicationUserModelId))
                  {
                      ApplicationUserModeId = applicationUserModelId;
                  }
                  else
                  {
                      throw new Exception("Couldn't find required Application User Mode Id");
                  }

                  return true;
              }

              [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 4)]
              private class PACKAGE_ID
              {
                  public uint reserved;
                  public uint processorArchitecture;
                  public ulong version;
                  public string name;
                  public string publisher;
                  public string resourceId;
                  public string publisherId;
              }

              [DllImport("kernel32.dll", CharSet = CharSet.Unicode, ExactSpelling = true)]
              private static extern uint PackageFamilyNameFromId(
                  PACKAGE_ID packageId,
                  ref uint packageFamilyNameLength,
                  StringBuilder packageFamilyName
              );

              [DllImport("kernel32.dll", CharSet = CharSet.Unicode, ExactSpelling = true)]
              private static extern uint FormatApplicationUserModelId(
                  string packageFamilyName,
                  string packageRelativeApplicationId,
                  ref uint applicationUserModelIdLength,
                  StringBuilder applicationUserModelId
              );
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="EnsureAUMIDGenerated" BeforeTargets="PrepareForBuild">
    <GenerateApplicationUserModeId ManifestPath="$(PackageManifestPath)" Condition="'$(PackageManifestPath)' != ''" >
      <Output TaskParameter="ApplicationUserModeId" PropertyName="ApplicationUserModeId" />
    </GenerateApplicationUserModeId>
    <PropertyGroup>
      <ApplicationUserModeId Condition="'$(ApplicationUserModeId)' == '' and '$(Configuration)' == 'Production'" >19282JackieLiu.Notepads-Beta_echhpq9pdbte8!App</ApplicationUserModeId>
      <ApplicationUserModeId Condition="'$(ApplicationUserModeId)' == '' and '$(Configuration)' != 'Production'" >Notepads-Dev_echhpq9pdbte8!App</ApplicationUserModeId>
    </PropertyGroup>
    <WriteLinesToFile File="$(GeneratedFilesDir)constants.h" Lines="#pragma once" Overwrite="true" />
    <WriteLinesToFile File="$(GeneratedFilesDir)constants.h" Lines="#define AUMID L&quot;$(ApplicationUserModeId)&quot;" Overwrite="false" />
  </Target>
</Project>