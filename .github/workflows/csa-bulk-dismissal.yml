name: Code scanning alerts bulk dismissal

on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Type of filter to use ("path" for using path and "desc" for using description)'
        required: true
        default: 'path'

jobs:
  setup:
    runs-on: windows-latest
    outputs:
      matrix: ${{ steps.set_filter_matrix.outputs.matrix }}
    steps:
      - name: Setup filter matrix
        id: set_filter_matrix
        shell: pwsh
        run: |
          if ( $env:FILTER_TYPE -ieq 'path' ) {
            $MATRIX = '{
              "include": [
                {
                  "filter": "*/obj/*"
                }
              ]
            }'
          } elseif ( $env:FILTER_TYPE -ieq 'desc' ) {
            $MATRIX = '{
              "include": [
                {
                  "filter": "Calls to unmanaged code"
                },{
                  "filter": "Unmanaged code"
                }
              ]
            }'
          }
          echo "::set-output name=matrix::$($MATRIX -replace '\r*\n*', '')"
        env:
          FILTER_TYPE: ${{ github.event.inputs.type }}
  dismiss-alerts: 
    name: Dismiss alerts
    needs: setup
    runs-on: windows-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    env:
      # Settings
      OWNER: ${{ github.repository_owner }} # verbatim from URL
      PROJECT_NAME: ${{ github.event.repository.name }} # verbatim from URL
      ACCESS_TOKEN: ${{ secrets.CSA_ACCESS_TOKEN }} # requires security_events read/write permissions
      DISMISS_REASON: ${{ secrets.DISMISS_REASON_VAR }} # "false positive", "won't fix" or "used in tests". 
      ALERTS_PER_PAGE: 100
    steps:
      - name: Run automation
        id: run_automation
        shell: pwsh
        run: |
          $page = 1
          $LIST_OF_ALERTS = $(curl.exe -u "$($env:OWNER):$($env:ACCESS_TOKEN)" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/$env:OWNER/$env:PROJECT_NAME/code-scanning/alerts?state=open&page=$page&per_page=$env:ALERTS_PER_PAGE" | ConvertFrom-Json)
          while ( $LIST_OF_ALERTS -ne $null ) {
            if ( $env:FILTER_TYPE -ieq 'path' ) {
              $MATCHES = $MATCHES + $($LIST_OF_ALERTS | Where-Object { $_.most_recent_instance.location.path -like "$env:FILTER" })
            } else {
              $MATCHES = $MATCHES + $($LIST_OF_ALERTS | Where-Object { $_.rule.description -like "$env:FILTER" })
            }
            
            $page = $page + 1
            $LIST_OF_ALERTS = $(curl.exe -u "$($env:OWNER):$($env:ACCESS_TOKEN)" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/$env:OWNER/$env:PROJECT_NAME/code-scanning/alerts?state=open&page=$page&per_page=$env:ALERTS_PER_PAGE" | ConvertFrom-Json)
          }

          $MATCHES.number | Foreach-Object {
            $ALERT_URL = "https://api.github.com/repos/$OWNER/$PROJECT_NAME/code-scanning/alerts/$_"
            curl.exe -u "$($env:OWNER):$($env:ACCESS_TOKEN)" -X PATCH -H "Accept: application/vnd.github.v3+json" $ALERT_URL -d '{"state":"dismissed","dismissed_reason":"'"$env:DISMISS_REASON"'"}'
          }
        env:
          FILTER: ${{ matrix.filter }}
          FILTER_TYPE: ${{ github.event.inputs.type }}

# Built with ‚ù§ by [Pipeline Foundation](https://pipeline.foundation)